* desc (describe)
- 테이블에 대한 컬럼 정보

* select * from 테이블명
- 해당 테이블의 전체 컬럼의 값을 출력
SELECT * 
FROM emp;



* select 컬럼명, 컬럼명 from 테이블명
- 테이블의 특정 컬럼들의 값만 추출 
SELECT empno, ename 
FROM emp;

SELECT empno, ename, job
FROM emp;

SELECT job
FROM emp;

* distinct
- 값의 중복을 제거하고, 종류 추출
SELECT DISTINCT job
FROM emp;

- 두 개 컬럼의 값의 중복 제거
SELECT DISTINCT job, deptno
FROM emp;

* all (기본)
- 중복제거 하지 않는다.

* order by 컬럼명 asc 상향 정렬
- 데이터 정렬
- 테이블의 데이터를 정렬 -> select
select * 
from emp
order by sal (asc);

* order by 컬럼명 desc 하향 정렬
- 데이터 정렬
- 테이블의 데이터를 정렬 -> select
select * 
from emp
order by sal desc;

* order by 컬럼명 asc, 컬럼명 desc, ....
- 컬럼 순서대로 정렬.
- 예) 연봉 높은순, 이름은 알파벳순 
SELECT * 
FROM emp
ORDER BY sal DESC, ename asc;

* order by 할 때 null 컬럼
- desc: null이 먼저 정렬
- asc: null 마직막으로 정렬


* alias (별명)
- 결과 추출 시 컬럼명 대신 별명을 사용한다.
select 컬럼명 (as) 별명, ....

SELECT ename, sal AS salary
FROM emp;

SELECT ename, sal "year salary"
FROM emp;

SELECT ename, sal 연봉
FROM emp;


* where
- 조건에 부합하는 데이터 추출
- emp 전체 데이터 -> 부서번호가 10인 것 선택 -> 컬럼 선택 
SELECT *
FROM emp
WHERE deptno=10

* +,-,*,/ 연산자
- select, where 절에서 사용가능
SELECT 
	ename, 
  sal, 
  sal * 0.1 AS incentive, 
  sal + (sal * 0.1) salary
FROM emp;

* 비교연산자
- =, !=, <>, >, <, >=, <=
SELECT ename, deptno, sal
FROM emp
WHERE sal > 2500;

* and, or, not

* DBMS에서 현재 사용하는 날짜 형식 알아내기
=> 기본 포맷 'DD-MON-RR'
SELECT *
FROM emp
WHERE hiredate = '02-APR-81';

=> 날짜 형식이 맞지 않아 오류
SELECT *
FROM emp
WHERE hiredate = '1981-04-02';

=> 현재 날짜 형식 알아냄
SELECT * 
FROM NLS_SESSION_PARAMETERS
WHERE PARAMETER = 'NLS_DATE_FORMAT';

=> 날짜 형식 변경하기
ALTER SESSION SET NLS_DATE_FORMAT='YYYY-MM-DD';

=> 이제 성공!
SELECT *
FROM emp
WHERE hiredate = '1981-04-02';

=> 날짜 비교
SELECT *
FROM emp
WHERE hiredate >= '1981-01-01'
	AND hiredate < '1981-06-01';

SELECT SYSDATE
FROM dual;
  
SELECT SYSDATE + 100
FROM dual; 

* IN
=> or 사용
SELECT *
FROM emp
WHERE 
	empno = 7566
  OR empno = 7782
  OR empno = 7788; 

=> in 사용
SELECT *
FROM emp
WHERE 
	empno IN (7566, 7782, 7788);  

=> 서브쿼리 사용 
/* 연봉이 3000 이상되는 직원이 있는 
	부서의 모든 직원을 조회하라! */
SELECT *
FROM emp
WHERE 
	deptno IN (SELECT DISTINCT deptno FROM emp WHERE sal >= 3000)


* like
- 문자열 다룰 때 사용
- %: 0개 이상의 문자, _: 한 개 문자  
SELECT *
FROM emp
WHERE
	ename LIKE 'A%'; 
  
SELECT *
FROM emp
WHERE
	ename LIKE '%T';  
  
SELECT *
FROM emp
WHERE
	ename LIKE '%LA%';

=> _, %의 차이
SELECT *
FROM emp
WHERE
	ename LIKE '_L%'; 

SELECT *
FROM emp
WHERE
	ename LIKE '%L%'; 


* between 값1 and 값2
- 값1 <= ? <= 값2
SELECT * 
FROM emp
WHERE 
	deptno >= 10
  and deptno <= 20
ORDER BY deptno
  
SELECT * 
FROM emp
WHERE 
	deptno BETWEEN 10 AND 20
ORDER BY deptno 

* is null
- 값이 할당되지 않은 레코드 찾기
=> null은 '=' 연산자로 비교할 수 없다.
SELECT *
FROM emp
WHERE
	COMM = null

=> is null 사용해야 한다.
SELECT *
FROM emp
WHERE
	COMM is null

* is not nuill
SELECT *
FROM emp
WHERE
	COMM IS NOT NULL


* union (합집합)
- 결과를 합친다. 단, 첫번째 결과에 존재하면 두번째 결과는 무시.
- 자동 중복 제거.
=> 이전방식
SELECT *
FROM emp
WHERE 
	sal >= 3000
  OR deptno = 30

=> UNION 사용
SELECT *
FROM emp
WHERE 
	sal >= 3000
union    
SELECT *
FROM emp
WHERE 
	sdeptno = 20


* UNION ALL
- 결과 집합 합침. 중복 허용.
SELECT *
FROM emp
WHERE 
	sal >= 3000

UNION ALL 
  
SELECT *
FROM emp
WHERE 
	deptno = 20

* minus
- 첫번째 결과에서 두번째 결과를 뺀다.
SELECT *
FROM emp
WHERE
	deptno = 20
  
MINUS

SELECT *
FROM emp
WHERE
	sal >= 3000  

* intersect (교집합)
SELECT *
FROM emp
WHERE
	sal >= 2500  

INTERSECT

SELECT *
FROM emp
WHERE
	deptno IN (10, 20)


* 용어정리
projection: 열(column) 선택

selection: 행(row) 선택

select ename, dept /* project이라 부름 */
from emp
where /* selection */
	sal >= 2500
	or deptno = 10

* Cross(cartesian) Join
- tableA x tableB 조인 수행
예)
[tableA]
a
b
c

[tableB]
1
2

[tableA x tableB]
a 1
a 2
b 1
b 2
c 1
c 2

=> cross join 문법1.
SELECT empno, ename, emp.deptno, dname
FROM emp, dept

=> cross join 문법2.
SELECT empno, ename, emp.deptno, dname
FROM emp cross join dept


* natural join
- 두 테이블의 연결을 외부키 값이 일치하는 레코드 끼리 묶음으로서
  의미있는 정보 추출
=> where 절을 통해서 특정 컬럼으로 두 테이블의 레코드를 묶는다.
SELECT empno, ename, emp.deptno, dname
FROM emp, dept
WHERE emp.deptno=dept.deptno

=> 컬럼명이 일치하는 것을 찾아서 자동으로 묶는다. 
SELECT empno, ename, dname
FROM emp NATURAL JOIN dept

* join ~using(컬럼) 절 
=> 정확하게 묶는 기준이 되는 컬럼을 지정할 수 있다. (where절 처럼)
SELECT empno, ename, dname
FROM emp JOIN dept USING(deptno)

* join ~ on(조건)
=> 외부키와 주키의 컬럼이 이름이 일치하지 않을 때 사용.
=> 단, 아래의 예는 emp의 외부키 이름과 dept의 주키 이름이 같다.
SELECT empno, ename, dname
FROM emp JOIN dept ON(emp.deptno = dept.deptno)

=> 테이블에 별명을 부여하여 사용할 수 있다.
SELECT empno, ename, dname
FROM emp e JOIN dept d 
	ON (e.deptno = d.deptno)

SELECT empno, ename, dname, e.deptno
FROM emp e JOIN dept d 
	ON e.deptno = d.deptno

* outer join
- 상대 테이블에 데이터가 존재하지 않더라도 빈 값으로 묶는다.
=> e.deptno에 해당하는 레코드를 dept 테이블에서 못 찾았다. 
     따라서 dept 테이블과 묶이지 않은 emp 레코드는 추출되지 않는다.
=> 안 묶이는 것은 추출되지 않는다.
SELECT empno, ename, dname
FROM emp e, dept d
WHERE e.DEPTNO=d.DEPTNO

=> 존재 하지 않는 레코드를 강제로 빈 레코드로 만들어서 묶는다.
=> 존재하지 않는 테이블 쪽에 (+) 기호를 붙인다.
SELECT empno, ename, dname
FROM emp e, dept d
WHERE e.DEPTNO=d.DEPTNO(+)

=> 기존 테이블 지정하여 outer join 수행
=> 왼쪽 테이블을 기준으로 오른쪽 테이블의 레코드와 묶는다.
=> 만약 오른쪽 테이블에 묶일 데이터가 없다면 강제로 빈 레코드를 만들어 묶는다.
=> 결과는 위와 같다.
=> null 값 컬럼이 있는 쪽(왼쪽). 
=> emp 레코드에서 부서번호가 null 경우도 추출.
SELECT empno, ename, dname, d.DEPTNO
FROM emp e left outer  join dept d
  ON e.DEPTNO = d.DEPTNO

=> dept레코드를 기준으로 emp에 일치하는 레코드가 없다하더라도 추출.
SELECT empno, ename, dname, d.DEPTNO
FROM emp e right outer  join dept d
  ON e.DEPTNO = d.DEPTNO

=> 양쪽 모두 일치하지 않는 레코드가 있더라도 추출.  
SELECT empno, ename, dname, d.DEPTNO
FROM emp e full outer  join dept d
  ON e.DEPTNO = d.DEPTNO  

* self join
SELECT e1.empno, e1.ename, e1.mgr, e2.ename
FROM emp e1 left outer JOIN emp e2
	ON e1.MGR = e2.EMPNO

* sub query
- 연산자 오른쪽에 괄호로 묶어서 사용
- 메인 쿼리의 조건으로 사용
- 서브 쿼리의 결과는 메인 쿼리에서 사용
- 실행순서는 서브쿼리 실행 -> 메인 쿼리에 전달됨
- 서브쿼리는 order by 절을 사용할 수 없다.
  단, from 절에 사용되는 경우는 order by 가능)

=>서브쿼리 사용전
SELECT job
FROM emp
WHERE empno=7698

SELECT *
FROM emp
WHERE job='MANAGER'

=> 서브쿼리 사용후
=> 단일항 서브쿼리
SELECT *
FROM emp
WHERE job=(
	SELECT job
	FROM emp
	WHERE empno=7698)

=> '=' 연산자와 서브쿼리 사용시 주의점. 서브쿼리의 결과가 2개이상(복수항)이면 안된다.
=> 아래는 오류 발생.
SELECT *
FROM emp
WHERE job = (SELECT job
FROM emp
WHERE sal > 2000)

=> 'in' 연산자는 여러개의 결과와 비교. 위의 질의문을 다음과 같이 바꾼다.
SELECT *
FROM emp
WHERE job IN (SELECT job
FROM emp
WHERE sal > 2000)

=> 비교할려는 컬럼의 개수가 맞아야 한다.
=> 다음은 job 컬럼과 두개의 컬럼 결과를 비교하기 때문에 오류!
SELECT *
FROM emp
WHERE job IN (SELECT job, ename
FROM emp
WHERE sal > 2000)

* 서브쿼리 복수 결과랑 비교하는 연산자들
1) =ANY
SELECT *
FROM emp
WHERE job IN (SELECT DISTINCT job
FROM emp
WHERE sal > 2000)
  
SELECT *
FROM emp
WHERE job =ANY (SELECT DISTINCT job
FROM emp
WHERE sal > 2000)


2) >ALL, <ALL
- 서브쿼리 결과 모두와 비교해서 작은것(<ALL)
- 서브쿼리 결과 모두와 비교해서 큰것.(>ALL)
SELECT *
FROM emp
WHERE sal <ALL (
	SELECT sal FROM emp WHERE deptno=30)

3) EXISTS 
- 서브쿼리의 결과가 있을 때 메인 쿼리를 실행
=> 아래는 50번 부서에 소속된 직원이 없기 때문에 메인 쿼리가 실행되지 않는다.
SELECT dname, deptno
FROM dept
WHERE EXISTS (SELECT * FROM emp WHERE emp.DEPTNO=50)  

=> 다음 30번 부서에 소속된 직원이 있기 때문에 메인 쿼리가 실행된다.
SELECT dname, deptno
FROM dept
WHERE EXISTS (SELECT * FROM emp WHERE emp.DEPTNO=40)  

* 서브쿼리와 메인쿼리의 복수개의 컬럼 비교
SELECT ename, deptno, comm
FROM emp
WHERE
  (sal, comm) IN (SELECT sal, comm FROM emp WHERE deptno=30)
  AND deptno <> 30




























































